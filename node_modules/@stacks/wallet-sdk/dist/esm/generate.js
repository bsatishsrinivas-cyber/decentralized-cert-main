import { generateMnemonic, mnemonicToSeed } from '@scure/bip39';
import { wordlist } from '@scure/bip39/wordlists/english';
import { HDKey } from '@scure/bip32';
import { bytesToHex } from '@stacks/common';
import { encryptMnemonic } from '@stacks/encryption';
import { DerivationType } from '.';
import { deriveAccount, deriveWalletKeys } from './derive';
import { getRootNode } from './models/common';
export function randomSeedPhrase(entropy = 256) {
    return generateMnemonic(wordlist, entropy);
}
export const generateSecretKey = randomSeedPhrase;
export const generateWallet = async ({ secretKey, password, }) => {
    const ciphertextBytes = await encryptMnemonic(secretKey, password);
    const encryptedSecretKey = bytesToHex(ciphertextBytes);
    const rootPrivateKey = await mnemonicToSeed(secretKey);
    const rootNode = HDKey.fromMasterSeed(rootPrivateKey);
    const walletKeys = await deriveWalletKeys(rootNode);
    const wallet = {
        ...walletKeys,
        encryptedSecretKey,
        accounts: [],
        config: {
            accounts: [],
        },
    };
    return generateNewAccount(wallet);
};
export const generateNewAccount = (wallet) => {
    const accountIndex = wallet.accounts.length;
    const newAccount = deriveAccount({
        rootNode: getRootNode(wallet),
        index: accountIndex,
        salt: wallet.salt,
        stxDerivationType: DerivationType.Wallet,
    });
    return {
        ...wallet,
        accounts: [...wallet.accounts, newAccount],
    };
};
//# sourceMappingURL=generate.js.map